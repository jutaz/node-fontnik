name: Node.js Package

on:
  release:
    types: [created]
  push:
    branches: [master]

jobs:
  test:
    runs-on: ${{ matrix.os.host }}
    strategy:
      matrix:
        node: [16, 18]
        build_type: ["release"]
        os:
          - name: darwin
            architecture: x86
            host: macos-12

          - name: darwin
            architecture: arm64
            host: macos-14

          - name: linux
            architecture: arm64
            host: ubuntu-20.04

          - name: linux
            architecture: x86
            host: ubuntu-20.04

    name: ${{ matrix.os.name }}-${{ matrix.os.architecture }}-node${{ matrix.node }}-${{ matrix.build_type }} test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Set up MacOS env
        if: matrix.os.name == 'darwin' && matrix.os.architecture == 'arm64'
        run: |
          brew install python llvm freetype boost
          python3 -m pip install --break-system-packages --no-binary :all: --upgrade setuptools

      - name: Set up MacOS env
        if: matrix.os.name == 'darwin' && matrix.os.architecture == 'x86'
        run: |
          brew install llvm
          python3 -m pip install --no-binary :all: --upgrade setuptools

      - name: Set up Linux env
        if: matrix.os.name == 'linux'
        run: |
          sudo apt update
          sudo apt install -y clang llvm

      - name: Test
        if: matrix.os.name == 'linux'
        run: |
          npm ci
          ./scripts/setup.sh --config local.env
          source local.env
          make ${{ matrix.build_type }}
          npm test

      - name: Test
        if: matrix.os.name == 'darwin' && matrix.os.architecture == 'arm64'
        env:
          CXX: clang++
          CC: clang
          llvm_toolchain_dir: /opt/homebrew/opt/llvm/
          LDFLAGS: "-L/opt/homebrew/opt/boost/lib -L/opt/homebrew/opt/freetype2/lib"
          CPPFLAGS: "-I/opt/homebrew/opt/boost/include -I/opt/homebrew/opt/freetype2/include/freetype2/"
          DISABLE_BOOST_INSTALL_MASON: "true"
          DISABLE_BOOST_INSTALL_FREETYPE: "true"
          DISABLE_CLANG_INSTALL_VIA_MASON: "true"
        run: |
          npm ci
          ./scripts/setup.sh --config local.env
          source local.env
          make ${{ matrix.build_type }}
          npm test

      - name: Test
        if: matrix.os.name == 'darwin' && matrix.os.architecture == 'x86'
        env:
          CXX: clang++
          CC: clang
          llvm_toolchain_dir: /opt/homebrew/opt/llvm/
          DISABLE_CLANG_INSTALL_VIA_MASON: "true"
        run: |
          npm ci
          ./scripts/setup.sh --config local.env
          source local.env
          make ${{ matrix.build_type }}
          npm test

  asan-build-test:
    runs-on: ubuntu-20.04
    name: ASAN toolset test
    env:
      BUILDTYPE: debug
      TOOLSET: asan
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "14"

      - name: Test
        run: |
          npm ci
          ./scripts/setup.sh --config local.env
          source local.env
          export CXXFLAGS="${MASON_SANITIZE_CXXFLAGS} -fno-sanitize-recover=all"
          export LDFLAGS="${MASON_SANITIZE_LDFLAGS}"
          make ${BUILDTYPE}
          export LD_PRELOAD=${MASON_LLVM_RT_PRELOAD}
          export ASAN_OPTIONS=fast_unwind_on_malloc=0:${ASAN_OPTIONS}
          npm test
          unset LD_PRELOAD

  g-build-test:
    runs-on: ubuntu-20.04
    name: G++ build test
    env:
      BUILDTYPE: debug
      CXX: g++-9
      CC: gcc-9
      CXXFLAGS: -fext-numeric-literals
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "14"

      - name: Test
        run: |
          npm ci
          ./scripts/setup.sh --config local.env
          source local.env
          make ${BUILDTYPE}
          npm test

  build:
    needs: [test, asan-build-test, g-build-test]
    runs-on: ${{ matrix.os.host }}
    strategy:
      matrix:
        os:
          - name: darwin
            architecture: x86
            host: macos-12

          - name: darwin
            architecture: arm64
            host: macos-14

          - name: linux
            architecture: arm64
            host: ubuntu-20.04

          - name: linux
            architecture: x86
            host: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Set up MacOS env
        if: matrix.os.name == 'darwin' && matrix.os.architecture == 'arm64'
        run: |
          brew install python llvm freetype boost
          python3 -m pip install --break-system-packages --no-binary :all: --upgrade setuptools

      - name: Set up MacOS env
        if: matrix.os.name == 'darwin' && matrix.os.architecture == 'x86'
        run: |
          brew install llvm
          python3 -m pip install --no-binary :all: --upgrade setuptools

      - name: Set up Linux env
        if: matrix.os.name == 'linux'
        run: |
          sudo apt update
          sudo apt install -y clang llvm

      - name: Build
        if: matrix.os.name == 'linux'
        run: |
          ./scripts/setup.sh --config local.env
          source local.env
          make release

      - name: Build
        if: matrix.os.name == 'darwin' && matrix.os.architecture == 'arm64'
        env:
          CXX: clang++
          CC: clang
          llvm_toolchain_dir: /opt/homebrew/opt/llvm/
          LDFLAGS: "-L/opt/homebrew/opt/boost/lib -L/opt/homebrew/opt/freetype2/lib"
          CPPFLAGS: "-I/opt/homebrew/opt/boost/include -I/opt/homebrew/opt/freetype2/include/freetype2/"
          DISABLE_BOOST_INSTALL_MASON: "true"
          DISABLE_BOOST_INSTALL_FREETYPE: "true"
          DISABLE_CLANG_INSTALL_VIA_MASON: "true"
        run: |
          ./scripts/setup.sh --config local.env
          source local.env
          make release

      - name: Build
        if: matrix.os.name == 'darwin' && matrix.os.architecture == 'x86'
        env:
          CXX: clang++
          CC: clang
          llvm_toolchain_dir: /opt/homebrew/opt/llvm/
          DISABLE_CLANG_INSTALL_VIA_MASON: "true"
        run: |
          ./scripts/setup.sh --config local.env
          source local.env
          make release

      - name: Prebuildify ${{ matrix.os.name }}-${{ matrix.os.architecture }}
        if: matrix.os.name == 'darwin' && matrix.os.architecture == 'arm64'
        env:
          CXX: clang++
          CC: clang
          llvm_toolchain_dir: /opt/homebrew/opt/llvm/
          LDFLAGS: "-L/opt/homebrew/opt/boost/lib -L/opt/homebrew/opt/freetype2/lib"
          CPPFLAGS: "-I/opt/homebrew/opt/boost/include -I/opt/homebrew/opt/freetype2/include/freetype2/"
          DISABLE_BOOST_INSTALL_MASON: "true"
          DISABLE_BOOST_INSTALL_FREETYPE: "true"
          DISABLE_CLANG_INSTALL_VIA_MASON: "true"
        run: npm run prebuildify -- --platform=${{ matrix.os.name }} --arch=${{ matrix.os.architecture }}

      - name: Prebuildify ${{ matrix.os.name }}-${{ matrix.os.architecture }}
        env:
          CXX: clang++
          CC: clang
          llvm_toolchain_dir: /opt/homebrew/opt/llvm/
          DISABLE_CLANG_INSTALL_VIA_MASON: "true"
        run: npm run prebuildify -- --platform=${{ matrix.os.name }} --arch=${{ matrix.os.architecture }}

      - name: Prebuildify ${{ matrix.os.name }}-${{ matrix.os.architecture }}
        if: matrix.os.name == 'linux'
        run: npm run prebuildify -- --platform=${{ matrix.os.name }} --arch=${{ matrix.os.architecture }}

      # Upload the end-user binary artifact
      - uses: actions/upload-artifact@v3
        with:
          name: prebuilds
          path: prebuilds
          retention-days: 14

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm ci

      - name: Download prebuilds
        uses: actions/download-artifact@v3
        with:
          name: prebuilds
          path: ./

      - name: Package and Publish
        run: |
          # npm publish --access public
          ls -lah ./
          ls -lah ./prebuilds
          ls -lah ./prebuilds/
          ls -lah ./prebuilds/prebuilds/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
